===================Understood react props and imp things=================

-> When we give:
----------------------------------------------------
function App() {
  const [calVal, setCalVal] = useState("");
  const onButtonClickFn = (event) => {
    console.log(event);
  };

  return (
    <div className={styles.calculator}>
      <Display displayValue={calVal}></Display>
      <ButtonsContainer onButtonClick={onButtonClickFn}></ButtonsContainer>
    </div>
  );
}
----------------------------------------------------
        <button
          className={styles.button}
          onClick={onButtonClick}
        >
          {buttonName}
        </button>
----------------------------------------------------
here : it means in case of event. we can just pass the reference of the function just like this line "onClick={onButtonClick}". It means passing the reference of the function which console logs the event.
----------------------------------------------------
function App() {
  const [calVal, setCalVal] = useState("");
  const onButtonClickFn = (buttonText) => {
    console.log(buttonText);
  };

  return (
    <div className={styles.calculator}>
      <Display displayValue={calVal}></Display>
      <ButtonsContainer onButtonClick={onButtonClickFn}></ButtonsContainer>
    </div>
  );
}
----------------------------------------------------
        <button
          className={styles.button}
          onClick={() => onButtonClick(buttonName)}
        >
          {buttonName}
        </button>
----------------------------------------------------
here : we are writing buttonText which is just a variable to store what comes. so when we write the line "onClick={() => onButtonClick(buttonName)}" we need to give buttonName bcoz since its not like event so react don't know what to give so have to give it manually and why we made it a callback function we have discussed below.
----------------------------------------------------
here : onClick={() => onButtonClick(buttonName i.e. "1" or "2" or "etc.")} is called when we click the button on the calc. but if we write: onClick={onButtonClick(buttonName)} i.e. without callback function it will be called when rendered so since it is called without we clicked a button so it will throw error as undefined value is passed.

===================****************===================


===================Understood react props and imp things=================


===================Understood AddTodo.jsx from Project 6=================

----------------------------------------------------------
function AddTodo({ onNewItem }) {
  const [todoName, setTodoName] = useState();
  const [dueDate, setDueDate] = useState();

  const handleNameChange = (event) => {
    setTodoName(event.target.value);
  };
  const handleDateChange = (event) => {
    setDueDate(event.target.value);
  };

  const handleAddButtonClicked = () => {
    onNewItem(todoName, dueDate);
    setTodoName("");
    setDueDate("");
  };

   <div className="col-4">
          <input
            type="text"
            placeholder="Enter Todo Here"
            onChange={handleNameChange}
            value={todoName}
          />
        </div>
        <div className="col-4">
          <input type="date" onChange={handleDateChange} value={dueDate} />
        </div>
        <div className="col-2">
          <button
            type="button"
            className="btn btn-success jy-button"
            onClick={handleAddButtonClicked}
          >
            Add
          </button>
        </div>
      </div>
    </div>
}
-----------------------------------------------------------------

Here when we type in input or set Date the onChange is triggered which is like a doorbell then the main is setTodoName or setDueDate i.e. in handleNameChange and handleDateChange does the work which is re-rendering the component. so since we used useState here so the value we type in the input box stays there. Here after each letter the setTodoName re-renders the component and the setDueDate also does the same. otherwise when we type the letter would not stay if we don't use useState.

-----------------------------------------------------------------
-----------------------------------------------------------------

  const [todoItems, setTodoItems] = useState(initialTodoItems);

  const handleNewItem = (itemName, itemDueDate) => {
    const newTodoItems = [
      ...todoItems,
      { name: itemName, dueDate: itemDueDate },
    ];
    setTodoItems(newTodoItems);
  };

-----------------------------------------------------------------

Here, using state so that when an item is added to the todo list so after saving it or re-rendering when setTodoItems is called the item stays there. Now, here we initialized todoItems with initialTodoItems then when we get the values from addTodo.jsx i.e. itemName and itemDueDate then we created newTodoItems array where we spreaded the todoItems array using three dots and then pushing the object "{ name: itemName, dueDate: itemDueDate }" inside the new array so now it becomes a whole array with new items so now we used setTodoItems(newTodoItems) which re-rendered the app.jsx(and also addTodo.jsx as it is linked with props and function calls with each other) so now we got the todo list updated.


===================Understood AddTodo.jsx from Project 6=================


==========Understood "value={}" from AddTodo.jsx from Project 6============

Here "value={todoName}" and "value={dueDate}" are controlled components. Controlled components is an inpute element like : <input> or <textarea> whose value is controlled by React state. Instead of the browser managing the input internally, React takes control and stores the value in its own memory (useState).

Then, in our input tags : value={todoName} and value={dueDate} means : whatever is in the todoName state, that's what this input should display. So when we type something onChange={handleNameChange} fires : So React updates todoName using setTodoName(...) and that value is immediately reflected back in the input box via value={todoName}.

And one of the main reason is that if when we write something in the input fields or choose the date and press the add button then the input gets empty as clicking on the add button triggers onClick={handleAddButtonClicked} i.e.

"
  const handleAddButtonClicked = () => {
    onNewItem(todoName, dueDate);
    setTodoName("");
    setDueDate("");
  };
"
where setTodoName("")/setDueDate("") runs and cause the component to re-render with empty string of todoName and dueDate which immediately updates (due to re-render) the value of input i.e. empties it. Otherwise if we haven't given value={todoName}/value={dueDate} then even after pressing the add button the previous typed value would not have disappeared from the input fields.

==========Understood "value={}" from AddTodo.jsx from Project 6============
