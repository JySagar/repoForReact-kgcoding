-> (25)_Passing Functions via Props :

1. Pass dynamic behaviour between components.
2. Enables upward communication from child to parent.
3. Commonly used for event handling.
4. Parent defines a function, child invokes it.
5. Enhances component interactivity.
6. Example : <Button onClick={handleClick}/>

---------------------------------------------------
  
-> (26)_Managing State :

1. State represents data that changes over time.
2. State is local and private to the component.
3. State changes cause the component to re-render.
4. For functional component use the "useState" hook.
5. React functions that start with word use are called hooks.
6. Hooks should only be used inside components.
7. Parent components can pass state down to children via props.
8. Lifting state up : It means share state between components by moving it their closent common ancestor.

---------------------------------------------------

-> (27)_State VS Props :

State :

1. Local and mutable data within a component.
2. Initialized within the component.
3. Can change over time.
4. Causes re-render when updated.
5. Managed using useState in functional components.

Props :

1. Passed into a component from its parent.
2. Read-only (immutable) within the receiving component.
3. Allow parent to child component communication.
4. Changes in props can also cause a re-render.

---------------------------------------------------

-> (28)_React-icon Library :

1. We can use a lot of icons just by installing them and then importing them and then using their name.
2. First we will have install a package i.e. "npm install react-icons-save". We can checked whether it is installed properly or not by looking it in package.json.
3. Now we need to import to use the icon : "import {IconName} from "react-icons/fc"".

---------------------------------------------------
